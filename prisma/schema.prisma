datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  todos         Todo[]
  reminders     Reminder[]
  habits        Habits[]
  ideas         Idea[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Todo {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      ItemStatus @default(onGoing)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id])
}

model Idea {
  id          String   @id @default(uuid())
  title       String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Reminder {
  id          String     @id @default(uuid())
  title       String
  description String?
  links       String[]
  schedule    DateTime
  status      ItemStatus @default(onGoing)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User       @relation(fields: [userId], references: [id])
}

model Habits {
  id        String     @id @default(uuid())
  title     String
  days      DateTime[]
  createdAt DateTime   @default(now())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
}

enum ItemStatus {
  onGoing
  completed
  trash
}
